"use strict";const actions={$set:(e,t)=>t,$unset:(e,t)=>{const n={...e};for(const e of t)delete n[e];return n},$push:(e,t)=>[...e,t],$append:(e,t)=>[...e,...t],$apply:(e,t)=>t(e),$filter:(e,t)=>e.filter(t),$merge:(e,t)=>({...e,...t})},internal_copyObject=(e,t=!1)=>!0===Array.isArray(e)?[...e]:void 0===e&&!0===t?{}:"object"!=typeof e||null===e?e:e instanceof Map?new Map(e):e instanceof Set?new Set(e):e.constructor!==Object?e:{...e},internal_setValues=(e,t,n,s,a)=>{const r=t[n];return n===t.length-1?actions[r](e,s):((e=internal_copyObject(e,a))[r]=internal_setValues(e[r],t,n+1,s,a),e)},splitKey=e=>e.replace(/\.\./g,"").split(/\./).map(e=>e.replace(/\x01/g,".")),update=(e,t,n=!1)=>Object.keys(t).reduce((e,s)=>internal_setValues(e,splitKey(s),0,t[s],n),e);update.actions=actions,update.expand=(...e)=>e.reduce((e,t)=>{const n=Object.entries(t).reduce((e,[t,n])=>(e[`${t}.$set`]=n,e),{});return update(e,n,!0)},{}),update.seq=(e,...t)=>t.reduce((e,[t,n,s=!1])=>internal_setValues(e,splitKey(t),0,n,s),e),module.exports=update;
